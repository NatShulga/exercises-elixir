---

name: Анонимные функции
theory: |

  Помимо именованных функций, можно создавать анонимные в форме `fn (x) -> fn_body end`, важно отметить, что для вызова таких функций нужно дописать перед скобками точку `.`. Рассмотрим примеры:

  ```elixir
  sum = fn (x, y) -> x + y end
  sum.(2, 3) # => 5

  magic = fn (a, b, c) -> (a + b) * c end
  magic.(2, 3, 4) # => 20
  ```

  Так как функции в эликсире являются объектами первого класса, то часто приходится писать анонимные функции, которые передаются в другие функции и для сокращения записи таких функций используется оператор `&`:

  ```elixir
  mul = &(&1 * &2)
  mul.(3, 3) # => 9

  magic = &((&1 + &2 + &3) * &4)
  magic.(1, 2, 3, 4) # => 24

  more_magic = &(&1.(&2))
  increment = &(&1 + 1)
  more_magic.(increment, 10) # => 11

  double = &(&1 * &1)
  more_magic.(double, 5) # => 25
  ```
  
  При использовании сокращенного синтаксиса для анонимных функций следует быть аккуратным, так как при большом количестве аргументов можно легко запутаться с их порядком, особенно, если в функции есть сложная логика. 

instructions: |

  Даны два *целых* числа. Создайте простой калькулятор, который поддерживает следующие операции: `сложение`, `вычитание`, `деление`, `умножение`.

  ```elixir
  Solution.calculate("+", 2, 3)  # => 5
  Solution.calculate("+", 0, -3) # => -3
  Solution.calculate("-", 2, 3) # => -1
  Solution.calculate("-", 0, 3) # => -3
  Solution.calculate("/", 4, 4) # => 1.0
  Solution.calculate("/", 3, 2) # => 1.5
  Solution.calculate("*", 2, 2) # => 4
  Solution.calculate("*", 0, 2) # => 0
  ```

tips:
  - |
    [Про объекты первого класса](https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82_%D0%BF%D0%B5%D1%80%D0%B2%D0%BE%D0%B3%D0%BE_%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B0)
